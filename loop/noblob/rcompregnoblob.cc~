/*
   ARPACK++ v1.2 2/18/2000
   c++ interface to ARPACK code.

   MODULE RCompReg.cc.
   Example program that illustrates how to solve a complex
   standard eigenvalue problem in regular mode using the 
   ARrcCompStdEig class.

   1) Problem description:

      In this example we try to solve A*x = x*lambda in regular mode,
      where A is obtained from the standard central difference
      discretization of the convection-diffusion operator 
                     (Laplacian u) + rho*(du / dx)
      on the unit squre [0,1]x[0,1] with zero Dirichlet boundary
      conditions.

   2) Data structure used to represent matrix A:

      ARrcCompStdEig is a class thar requires the user to provide
      a way to perform the matrix-vector product w = Av. In this
      example a class called CompMatrixA was created with this
      purpose. CompMatrixA contains a member function, MultMv(v,w),
      that takes a vector v and returns the product Av in w.

   3) The reverse communication interface:

      This example uses the reverse communication interface, which
      means that the desired eigenvalues cannot be obtained directly
      from an ARPACK++ class.
      Here, the overall process of finding eigenvalues by using the
      Arnoldi method is splitted into two parts. In the first, a
      sequence of calls to a function called TakeStep is combined
      with matrix-vector products in order to find an Arnoldi basis.
      In the second part, an ARPACK++ function like FindEigenvectors
      (or EigenValVectors) is used to extract eigenvalues and
      eigenvectors.

   4) Included header files:

      File             Contents
      -----------      -------------------------------------------
      cmatrixa.h       The CompMatrixA class definition.
      arrscomp.h       The ARrcCompStdEig class definition.
      rcompsol.h       The Solution function.
      arcomp.h         The "arcomplex" (complex) type definition.

   5) ARPACK Authors:

      Richard Lehoucq
      Kristyn Maschhoff
      Danny Sorensen
      Chao Yang
      Dept. of Computational & Applied Mathematics
      Rice University
      Houston, Texas
*/

#include <fstream>
#include <forward_list>
#include <cmath>
#include "arcomp.h"
#include "arrscomp.h"
#include "cmatrixanoblob.h"
#include "rcompsol.h"

using namespace std;

void Permutations(int pos, int L, int open, int close, vector<vector<int>>& B, vector<int>& y, vector<int>& z);

template<class T>
void Test(T type)
{

ofstream myfile;
myfile.precision(16);
myfile.open("FvsN34567noblobcorrect.dat");
double loopweightblob;
//double loopweight=1.41421356237;
//double loopweight=1.243219937;
double loopweight;
int L;

for(loopweight=0;loopweight<=1.9;loopweight=loopweight+0.1)  
{
cout<<loopweight<<endl;
loopweightblob=loopweight;
for(L=3;L<=7;L++)
{  

vector < vector<int> > B;
vector < vector<int> > C;

vector<int> y (2*L,0);
vector<int> z (2*L,0);

Permutations(0,L,0,0,B,y,z);
//cout <<B.size()<<endl;

/*for(int i=0;i<B.size();i++){
for(int j=0;j<(2*L);j++){
cout << B[i][j];
}
cout << endl;
}
*/


int zerocount=0;
int onecount=0;
for(int k=0;k<B.size(); k++)
{
C.push_back(B[k]);

	for(int i=0; i<2*L;i++)
	{
		if(B[k][i]==0)
		{	zerocount=0;
			onecount=0;
			for(int j=1; j<(2*L-i);j++)
			{
				if(B[k][i+j]==0)
				zerocount++;

				if(B[k][i+j]==1)
				onecount++;

				if(onecount>zerocount)
				{
				C[k][i+j]=i;
				C[k][i]=i+j;	
				}	
				if(onecount>zerocount)
				break;				
			}
		}
	}
}



/*for(int i=0;i<C.size();i++){
for(int j=0;j<(2*L);j++){
cout << C[i][j];
}
cout << endl;
}

cin >> L;
*/


/*int cond1, cond2;

int r1=0;

for(int i=0;i<2*L;i++)
{
y[i]=i;
}

sort(y.begin(),y.end());

do{
cond1=0;
cond2=1;
for(int j=0; j<2*L;j++)
{
if(y[y[j]]!=j || y[j]==j)
break;

if(j==(2*L-1))
cond1=1;
}					//end of j loop

if(cond1==1)
{
for(int j=0; j<2*L;j++)
{
	if((y[j]-j)>1)
		{
			for(int k=j+1;k<y[j];k++)
			{
				if(y[k]>y[j])
				cond2=0;	
			}			
			

		}			//end of y[j]-j>1 if statement

}
}					//end of cond1==1 if statement


if(cond1==1 && cond2==1)
{
B.push_back(y);
r1++;
}	

}while(next_permutation(y.begin(),y.end()));
*/



// Defining a complex matrix.


  int csize=C.size();

  CompMatrixA<T> A(csize); // n = 10*10.

  // Creating a complex eigenvalue problem and defining what we need:
  // the four eigenvectors of A with largest magnitude.
  ARrcCompStdEig<T> prob(csize, 2L);

  // Finding an Arnoldi basis.


	int i=0;
  while (!prob.ArnoldiBasisFound()) {

    // Calling ARPACK FORTRAN code. Almost all work needed to
    // find an Arnoldi basis is performed by TakeStep.

    prob.TakeStep();

    if ((prob.GetIdo() == 1)||(prob.GetIdo() == -1)) {

      // Performing matrix-vector multiplication.
      // In regular mode, w = Av must be performed whenever
      // GetIdo is equal to 1 or -1. GetVector supplies a pointer
      // to the input vector, v, and PutVector a pointer to the
      // output vector, w.

	/*int s;
	s=sizeof(prob.GetVector());
	complex<double>* v[s];	
	v[0]=prob.GetVector();*/

      //A.MultMv(prob.GetVector(), prob.PutVector()); This line was here originally, revert to this if necessary

	A.MultMv(prob.GetVector(), prob.PutVector(), C, L, loopweight, loopweightblob);
	
	
    }

  }

  // Finding eigenvalues and eigenvectors.

  prob.FindEigenvalues();

  // Printing solution.

  Solution(prob);

double F;
F=-(log(abs(prob.Eigenvalue(1).real())))/(2*L);

if(L==3)
myfile << loopweight <<"  ";

myfile <<F<< "   ";


}				//End of loop over L

myfile <<"\n";

}
myfile.close();

} // Test.


int main()
{

  // Solving a single precision problem with n = 100.

/*#ifndef __SUNPRO_CC

  Test((float)0.0);

#endif*/






  // Solving a double precision problem with n = 100.
cout.precision(16);
  Test((double)0.0);

} // main


void Permutations(int pos, int L, int open, int close, vector<vector<int>>& B, vector<int>& y, vector<int>& z)
{

if(close==L){
B.push_back(y);
}
else
{
	if(open>close)
	{
		y[pos]=1;
		Permutations(pos+1, L, open, close+1, B,y,z);
	}
	if(open<L)
	{
		y[pos]=0;
		Permutations(pos+1, L, open+1, close, B,y,z);
	}
}

}

